{"title":"剑指 Offer 04. 二维数组中的查找","uid":"fbb40c3574c6d879e5f206056adff580","slug":"剑指 Offer 04. 二维数组中的查找","date":"2021-08-28T12:24:08.000Z","updated":"2021-08-28T13:14:27.150Z","comments":true,"path":"api/articles/剑指 Offer 04. 二维数组中的查找.json","cover":"https://i.loli.net/2021/08/23/nTgK3iZQVLxvqy5.jpg","content":"<h2 id=\"题目详情\"><a href=\"#题目详情\" class=\"headerlink\" title=\"题目详情\"></a>题目详情</h2><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p>示例:</p>\n<p>现有矩阵 matrix 如下：</p>\n<p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p>\n<p>给定 target = 5，返回 true。</p>\n<p>给定 target = 20，返回 false。</p>\n<p>限制：</p>\n<p>0 &lt;= n &lt;= 1000</p>\n<p>0 &lt;= m &lt;= 1000</p>\n<h2 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h2><p>直接通过举例子说明解法吧，就用题目给的实例吧</p>\n<p>[<br>  [1,   4,   7,   11, 15],<br>  [2,   5,   8,   12, 19],<br>  [3,   6,   9,   16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p>\n<p>我们通过选取一个角落的数字和目标进行对比，从而排除掉不可能存在目标的区域</p>\n<p>第一步，目标是5，我们选取右上角的15，很明显5比15要小，而这个矩阵又有行列递增的性质，15既然是最后一列的第一个，那么说明它肯定是这一列最小的，而5比15还要小，那么这一列很明显可以排除。</p>\n<p>第二步，重复第一步，继续找剩下区域的右上角，如法炮制，我们可以把第四列，第三列也都排除掉，现在已经只剩两列了。</p>\n<p>第三步，我们还是选右上角，因为第三列，第四列，第五列已经都排除掉了，所以此时的右上角是4，5比4要大，而4已经它所在这一行最大的了，因此我们把这一行排除。</p>\n<p>第四步，找右上角，这次给我们找到了，因此返回true。</p>\n<p>总结一下步骤，每次循环都选取右上角的数字，然后根据对比的情况，比如是比目标小还是比目标打，从而变更搜寻的行或者列，当找到目标或者当前正在搜索的行或列已经越界时，跳出循环。</p>\n<p>Java代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public boolean findNumberIn2DArray(int[][] matrix, int target) &#123;\n    int rows &#x3D; matrix.length, cols &#x3D; matrix[0].length;\n    boolean found &#x3D; false;\n    if (!matrix.equals(null) &amp;&amp; rows &gt; 0 &amp;&amp; cols &gt; 0) &#123;\n      int nowRow &#x3D; 0, nowCol &#x3D; matrix[0].length - 1;\n      while (nowRow &lt; rows &amp;&amp; nowCol &gt;&#x3D; 0) &#123;\n        if (matrix[nowRow][nowCol] &#x3D;&#x3D; target) &#123;\n          found &#x3D; true;\n          break;\n        &#125; else if (matrix[nowRow][nowCol] &gt; target) &#123;\n          nowCol--;\n        &#125; else &#123;\n          nowRow++;\n        &#125;\n      &#125;\n    &#125;\n    return found;\n  &#125;</code></pre>\n\n\n\n","feature":false,"text":"题目详情在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 示例: 现有矩阵 matrix 如下： [ [1, 4, 7, 11, 15], ...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":7,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","count":2,"path":"api/tags/数据结构与算法.json"},{"name":"剑指Offer","slug":"剑指Offer","count":2,"path":"api/tags/剑指Offer.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85\"><span class=\"toc-text\">题目详情</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95\"><span class=\"toc-text\">解法</span></a></li></ol>","author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JVM垃圾回收","uid":"b4694def951abc4bafb5168cc2a7630a","slug":"JVM垃圾回收","date":"2021-08-15T08:16:37.000Z","updated":"2021-08-15T08:16:07.509Z","comments":true,"path":"api/articles/JVM垃圾回收.json","cover":"https://img-blog.csdnimg.cn/992408165d9448b88f720e3fb7e442d8.jpg","text":"JVM垃圾回收1. 如何判断对象可以回收1.1 简要介绍： 引用计数法，如果某个对象被引用了，则他的计数加1，不再被引用了，则减1，计数为0则回收。弊端：循环引用，比如a和b相互引用，即使他们两个永远都不再被使用了，但是由于存在引用计数，所以永远都不会被回收。早期python虚拟...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":7,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"JVM","slug":"JVM","count":5,"path":"api/tags/JVM.json"},{"name":"深入理解Java虚拟机","slug":"深入理解Java虚拟机","count":5,"path":"api/tags/深入理解Java虚拟机.json"},{"name":"源码分析","slug":"源码分析","count":3,"path":"api/tags/源码分析.json"}],"author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"HotSpot虚拟机对象探秘","uid":"c26847ef99f42b8a854d63bbf2df96ed","slug":"HotSpot虚拟机对象探秘","date":"2021-08-14T01:49:37.000Z","updated":"2021-08-14T01:53:26.407Z","comments":true,"path":"api/articles/HotSpot虚拟机对象探秘.json","cover":"https://img-blog.csdnimg.cn/d5af07a1654547758e69d8f48efeea51.jpg","text":"HotSpot虚拟机对象探秘1. 对象的创建1.1 类加载检查虚拟机遇到new之后，首先会去常量池中找这个类的符号引用，并检查这个符号引用代表的类是否已经被加载、解析和初始化过，如果找到了，就可以根据已有的信息划分空间、分配内存、初始化等等；如果没找到，那必须先执行相应的类加载过...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":7,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Java","slug":"Java","count":7,"path":"api/tags/Java.json"},{"name":"JVM","slug":"JVM","count":5,"path":"api/tags/JVM.json"},{"name":"深入理解Java虚拟机","slug":"深入理解Java虚拟机","count":5,"path":"api/tags/深入理解Java虚拟机.json"}],"author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"feature":true}}