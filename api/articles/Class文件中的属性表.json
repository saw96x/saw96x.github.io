{"title":"Class文件中的属性表","uid":"5da49ad2e7903119112e022f920d0056","slug":"Class文件中的属性表","date":"2021-08-23T00:45:31.000Z","updated":"2021-08-29T02:39:39.620Z","comments":true,"path":"api/articles/Class文件中的属性表.json","cover":"https://i.loli.net/2021/08/14/Sqjh2YfiQXBWbEu.jpg","content":"<h1 id=\"Class文件中的属性表\"><a href=\"#Class文件中的属性表\" class=\"headerlink\" title=\"Class文件中的属性表\"></a>Class文件中的属性表</h1><p>Class文件，字段表，方法表都可以携带自己的属性表集合，以描述某些场景专有的信息。</p>\n<p>为了能正确解析Class文件，《Java虚拟机规范》最初只预定义了9项所有Java虚拟机实现都应当能识别的属性，而在最新的《Java虚拟机规范》的Java SE 12版中，预定义属性已经增加到29项。先看看总表</p>\n<p><img src=\"https://i.loli.net/2021/08/23/kt1x9aH3domLrJN.png\" alt=\"1.PNG\"></p>\n<p><img src=\"https://i.loli.net/2021/08/23/kt1x9aH3domLrJN.png\" alt=\"1.PNG\"></p>\n<p><img src=\"https://i.loli.net/2021/08/23/XSPrYLW3ODlkgBb.png\" alt=\"3.PNG\"></p>\n<p>对于每一个属性，它的名称都要从常量池中引用一个CONSTANT_Utf8_info类型的常量来表示，而属性值的结构则是完全自定义的，只需要通过一个u4的长度属性去说明属性值所占用的位数即可。一个符合规则的属性表应该满足下表中所定义的结构。</p>\n<p><img src=\"https://i.loli.net/2021/08/23/wmUkjleYfAoaSu8.png\" alt=\"4.PNG\"></p>\n<h2 id=\"1-Code属性\"><a href=\"#1-Code属性\" class=\"headerlink\" title=\"1. Code属性\"></a>1. Code属性</h2><p>代码在经过编译器编译后，最终变为字节码存储在Code属性内，它出现在方法表的属性集合里，但并非所有方法表都有这个属性，比如接口或抽象方法就不存在Code属性。它的结构如表所示。</p>\n<p><img src=\"https://i.loli.net/2021/08/23/M9KSwXC6jlyD3Zx.png\" alt=\"1.PNG\"></p>\n<p>attribute_name_index是一项指向CONSTANT_Utf8_info型常量的索引，此常量值固定为“Code”，它代表了该属性的属性名称</p>\n","feature":true,"text":"Class文件中的属性表Class文件，字段表，方法表都可以携带自己的属性表集合，以描述某些场景专有的信息。 为了能正确解析Class文件，《Java虚拟机规范》最初只预定义了9项所有Java虚拟机实现都应当能识别的属性，而在最新的《Java虚拟机规范》的Java SE 12版中...","link":"","photos":[],"count_time":{"symbolsCount":461,"symbolsTime":"1 mins."},"categories":[{"name":"技术笔记","slug":"技术笔记","count":6,"path":"api/categories/技术笔记.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"深入理解Java虚拟机","slug":"深入理解Java虚拟机","count":6,"path":"api/tags/深入理解Java虚拟机.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Class%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E8%A1%A8\"><span class=\"toc-text\">Class文件中的属性表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Code%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1. Code属性</span></a></li></ol></li></ol>","author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JVM虚拟机的类加载机制","uid":"0ebc4600a20ae0476600d84a88d43c7f","slug":"JVM虚拟机的类加载机制","date":"2021-09-05T00:32:05.000Z","updated":"2021-09-19T01:25:45.321Z","comments":true,"path":"api/articles/JVM虚拟机的类加载机制.json","cover":"https://i.loli.net/2021/08/23/nc3P9ztCBIVS1m7.jpg","text":"JVM虚拟机的类加载机制JVM把描述类的数据从class文件中加载进内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这个过程被称作虚拟机的类加载机制。 与Java类型相关的诸多工作都是在运行期完成的，这让Java的编译增加了额外的困难，也增加...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"技术笔记","slug":"技术笔记","count":6,"path":"api/categories/技术笔记.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"深入理解Java虚拟机","slug":"深入理解Java虚拟机","count":6,"path":"api/tags/深入理解Java虚拟机.json"}],"author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"LeetCode中经典的栈题","uid":"6fa34a15afbc4ab69f0c778771db54cc","slug":"LeetCode中经典的栈题","date":"2021-11-24T02:29:29.000Z","updated":"2021-11-24T04:38:59.154Z","comments":true,"path":"api/articles/LeetCode中经典的栈题.json","cover":null,"text":"1. 有效的括号（LC第20题）给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;&#123;&#39;，&#39;&#125;&#39;，&#39;[&#39;，&#39;]&#39; 的字符串 s ，判断字符串是否有效。 有效字符串需满足： 左括号必须...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"算法笔记","slug":"算法笔记","count":4,"path":"api/categories/算法笔记.json"}],"tags":[{"name":"LeetCode","slug":"LeetCode","count":2,"path":"api/tags/LeetCode.json"},{"name":"数据结构与算法","slug":"数据结构与算法","count":4,"path":"api/tags/数据结构与算法.json"}],"author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"feature":false}}