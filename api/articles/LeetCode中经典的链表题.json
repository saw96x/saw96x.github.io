{"title":"LeetCode中经典的链表题","uid":"367463c88a16078125a84825dd49eab4","slug":"LeetCode中经典的链表题","date":"2021-11-22T02:39:39.000Z","updated":"2021-11-24T08:08:44.137Z","comments":true,"path":"api/articles/LeetCode中经典的链表题.json","cover":"https://i.loli.net/2021/08/23/z1OTKikv4DnZftY.jpg","content":"<h4 id=\"1-两数相加（LC第2题）\"><a href=\"#1-两数相加（LC第2题）\" class=\"headerlink\" title=\"1. 两数相加（LC第2题）\"></a><a href=\"https://leetcode-cn.com/problems/add-two-numbers/\">1. 两数相加（LC第2题）</a></h4><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 &#x3D; 807.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [0], l2 &#x3D; [0]\n输出：[0]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>\n<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n<li>题目数据保证列表表示的数字不含前导零</li>\n</ul>\n<p>本题思路很正常，主要的难点在于各种细节的处理。直接看代码上的注释。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//设置哑节点</span>\n  <span class=\"token class-name\">ListNode</span> dummy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//curr为当前两个链表节点值相加的结果的新节点</span>\n  <span class=\"token class-name\">ListNode</span> p1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">,</span> p2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//进位</span>\n  <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> p2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> p1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> p2<span class=\"token punctuation\">.</span>val <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//当前节点值相加的结果还要加上进位</span>\n    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> carry <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//本次相加产生的进位</span>\n    carry <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//本级相加的结果对10取余数</span>\n    curr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//移动节点</span>\n    curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n      p1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n      p2 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//最高位有进位还要补上</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carry <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    curr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>本题的几个重点：</p>\n<ol>\n<li>注意对进位的处理，首先，当前节点值相加还要加上上一次相加带来的进位。其次，本次产生的进位直接用sum/10得到，不用if分类讨论，而本次相加的结果则对10取余数即可。</li>\n<li>当全部加完之后，最高位可能也有进位，要记得补上。</li>\n<li>使用哑节点避免出现空指针的情况。</li>\n</ol>\n<h4 id=\"2-删除链表的倒数第-N-个结点（LC第19题）\"><a href=\"#2-删除链表的倒数第-N-个结点（LC第19题）\" class=\"headerlink\" title=\"2. 删除链表的倒数第 N 个结点（LC第19题）\"></a><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\">2. 删除链表的倒数第 N 个结点（LC第19题）</a></h4><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [1,2,3,4,5], n &#x3D; 2\n输出：[1,2,3,5]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [1], n &#x3D; 1\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [1,2], n &#x3D; 1\n输出：[1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中结点的数目为 <code>sz</code></li>\n<li><code>1 &lt;= sz &lt;= 30</code></li>\n<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n<li><code>1 &lt;= n &lt;= sz</code></li>\n</ul>\n<p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p>\n<p>这题实际上是要删除第length-n+1个节点，基于这个本质有两个思路：</p>\n<ol>\n<li>第一个常规思路：<strong>两趟扫描，第一趟得到链表的长度，第二趟移动到第length-n个节点，从而调整指针指向将length-n+1个节点删除</strong>。</li>\n<li>进阶思路：<strong>一趟扫描，设置两个指针，其中一个指针先走到n+1个节点上，然后两个指针开始同时走，当在前面的指针到达终点时，后面的指针也移到了第length-n个节点上，可以删除了。</strong></li>\n</ol>\n<p>思路1代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">removeNthFromEnd1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">ListNode</span> dummy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  dummy<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ListNode</span> movement <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>movement <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    movement <span class=\"token operator\">=</span> movement<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  length <span class=\"token operator\">-=</span> n<span class=\"token punctuation\">;</span>\n  movement <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    movement <span class=\"token operator\">=</span> movement<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  movement<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> movement<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>思路2代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">removeNthFromEnd2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//设置两个指针，第一个指针先移动到第二个指针前面n+1个节点处</span>\n  <span class=\"token comment\">//然后同时移动两个指针，当第一个指针达到链表末尾，第二个指针也就达到了要删除节点的前一个</span>\n  <span class=\"token class-name\">ListNode</span> dummy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  dummy<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ListNode</span> first <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ListNode</span> second <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    first <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    first <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    second <span class=\"token operator\">=</span> second<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  second<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> second<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-合并两个有序链表（LC第21题）\"><a href=\"#3-合并两个有序链表（LC第21题）\" class=\"headerlink\" title=\"3. 合并两个有序链表（LC第21题）\"></a><a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\">3. 合并两个有序链表（LC第21题）</a></h4><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]\n输出：[1,1,2,3,4,4]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [], l2 &#x3D; []\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：l1 &#x3D; [], l2 &#x3D; [0]\n输出：[0]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>两个链表的节点数目范围是 <code>[0, 50]</code></li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n<li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li>\n</ul>\n<p>思路很朴素，一个个比，一个个连，但是实现方式有两种：</p>\n<ol>\n<li>直接迭代，注意点在与迭代完后必然还会剩一个节点，要记得接上：</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//哑节点</span>\n  <span class=\"token class-name\">ListNode</span> dummy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ListNode</span> cur <span class=\"token operator\">=</span> dummy<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n      l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n      l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//当l1和l2经过上面的迭代后，还会剩下最后一个，要补上</span>\n  cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> l2 <span class=\"token operator\">:</span> l1<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> dummy<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>递归，比较考验思考，但是代码很简洁漂亮：</li>\n</ol>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    l1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists2</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//对l1.next, l2为头节点的两个链表进行合并</span>\n    <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    l2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists2</span><span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//对l2.next, l1为头节点的两个链表进行合并</span>\n    <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-环形链表（LC第141题）\"><a href=\"#4-环形链表（LC第141题）\" class=\"headerlink\" title=\"4. 环形链表（LC第141题）\"></a><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\">4. 环形链表（LC第141题）</a></h4><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>\n<p>如果链表中存在环，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1\n输出：true\n解释：链表中有一个环，其尾部连接到第二个节点。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [1,2], pos &#x3D; 0\n输出：true\n解释：链表中有一个环，其尾部连接到第一个节点。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [1], pos &#x3D; -1\n输出：false\n解释：链表中没有环。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点的数目范围是 <code>[0, 104]</code></li>\n<li><code>-105 &lt;= Node.val &lt;= 105</code></li>\n<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li>\n</ul>\n<p>思路相当简单，但是对第一次见到这个题目可能不那么容易想到，不过见过一次就不可能忘了：<strong>设置两个指针，一个一次走两步，一个一次走一步，如果有环，那么二者必然相遇，如果没有环，那么快的那个会先到达终点。</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//双指针法,时间复杂度:O(n)，空间复杂度：O(1)，无需使用额外空间</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasCycle1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListNode</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//让快指针走的更快，没有环就会到达终点返回false，否则快慢指针必然相遇</span>\n    <span class=\"token comment\">//返回true</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>slow <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n        fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-反转链表（LC第206题）\"><a href=\"#5-反转链表（LC第206题）\" class=\"headerlink\" title=\"5. 反转链表（LC第206题）\"></a><a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\">5. 反转链表（LC第206题）</a></h4><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [1,2,3,4,5]\n输出：[5,4,3,2,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [1,2]\n输出：[2,1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; []\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点的数目范围是 <code>[0, 5000]</code></li>\n<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n<p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p>\n<p>直接看代码上的注释吧：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//pre是cur节点的上一个节点，cur是当前处理的节点</span>\n        <span class=\"token class-name\">ListNode</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//临时保存cur的下个节点</span>\n            <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//把cur指向它的前一个节点，实现反转</span>\n            cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//pre和cur前移</span>\n            pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n            cur <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6-两两交换链表中的节点（LC第24题）\"><a href=\"#6-两两交换链表中的节点（LC第24题）\" class=\"headerlink\" title=\"6. 两两交换链表中的节点（LC第24题）\"></a><a href=\"https://leetcode-cn.com/problems/swap-nodes-in-pairs/\">6. 两两交换链表中的节点（LC第24题）</a></h4><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>\n<p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p>\n<p><strong>示例 1：</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [1,2,3,4]\n输出：[2,1,4,3]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 2：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; []\n输出：[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>示例 3：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：head &#x3D; [1]\n输出：[1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li>\n<li><code>0 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<p><strong>进阶：</strong>你能在不修改链表节点值的情况下解决这个问题吗?（也就是说，仅修改节点本身。）</p>\n<p>迭代法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">swapPairs1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//设置哑节点</span>\n  <span class=\"token class-name\">ListNode</span> dummyHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  dummyHead<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//因为每次反转要处理两个节点，所以检测条件也要两个都检测</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ListNode</span> l1 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> l2 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//l1的前一个节点指向l2</span>\n    temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//l1的下一个节点变为l2的下一个节点</span>\n    l1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//l2的下一个节点变为l1</span>\n    l2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//temp前进</span>\n    temp <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> dummyHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>递归法（看不懂）：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">swapPairs2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">ListNode</span> newHead <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">swapPairs2</span><span class=\"token punctuation\">(</span>newHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  newHead<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newHead<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":true,"text":"1. 两数相加（LC第2题）给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。 请你将两个数相加，并以相同形式返回一个表示和的链表。 你可以假设除了数字 0 之外，这两个数都不会以 0 开头。 示例 1： 输入...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"算法笔记","slug":"算法笔记","count":5,"path":"api/categories/算法笔记.json"}],"tags":[{"name":"LeetCode","slug":"LeetCode","count":3,"path":"api/tags/LeetCode.json"},{"name":"数据结构与算法","slug":"数据结构与算法","count":5,"path":"api/tags/数据结构与算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%EF%BC%88LC%E7%AC%AC2%E9%A2%98%EF%BC%89\"><span class=\"toc-text\">1. 两数相加（LC第2题）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-N-%E4%B8%AA%E7%BB%93%E7%82%B9%EF%BC%88LC%E7%AC%AC19%E9%A2%98%EF%BC%89\"><span class=\"toc-text\">2. 删除链表的倒数第 N 个结点（LC第19题）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%EF%BC%88LC%E7%AC%AC21%E9%A2%98%EF%BC%89\"><span class=\"toc-text\">3. 合并两个有序链表（LC第21题）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%EF%BC%88LC%E7%AC%AC141%E9%A2%98%EF%BC%89\"><span class=\"toc-text\">4. 环形链表（LC第141题）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%EF%BC%88LC%E7%AC%AC206%E9%A2%98%EF%BC%89\"><span class=\"toc-text\">5. 反转链表（LC第206题）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%EF%BC%88LC%E7%AC%AC24%E9%A2%98%EF%BC%89\"><span class=\"toc-text\">6. 两两交换链表中的节点（LC第24题）</span></a></li></ol>","author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LeetCode中的单调栈题","uid":"e132209059bdfe8fd53e19e341dda430","slug":"LeetCode中的单调栈题","date":"2021-11-24T07:43:03.000Z","updated":"2021-11-24T07:44:38.534Z","comments":true,"path":"api/articles/LeetCode中的单调栈题.json","cover":null,"text":"单调栈系列题目单调栈解法的介绍：https://leetcode-cn.com/problems/next-greater-element-i/solution/dan-diao-zhan-jie-jue-next-greater-number-yi-lei-w/ 5. 每日温度...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"算法笔记","slug":"算法笔记","count":5,"path":"api/categories/算法笔记.json"}],"tags":[{"name":"LeetCode","slug":"LeetCode","count":3,"path":"api/tags/LeetCode.json"},{"name":"数据结构与算法","slug":"数据结构与算法","count":5,"path":"api/tags/数据结构与算法.json"}],"author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"feature":"ture"},"next_post":{"title":"JVM虚拟机的类加载机制","uid":"0ebc4600a20ae0476600d84a88d43c7f","slug":"JVM虚拟机的类加载机制","date":"2021-09-05T00:32:05.000Z","updated":"2021-09-19T01:25:45.321Z","comments":true,"path":"api/articles/JVM虚拟机的类加载机制.json","cover":"https://i.loli.net/2021/08/23/nc3P9ztCBIVS1m7.jpg","text":"JVM虚拟机的类加载机制JVM把描述类的数据从class文件中加载进内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这个过程被称作虚拟机的类加载机制。 与Java类型相关的诸多工作都是在运行期完成的，这让Java的编译增加了额外的困难，也增加...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"技术笔记","slug":"技术笔记","count":6,"path":"api/categories/技术笔记.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"JVM","slug":"JVM","count":6,"path":"api/tags/JVM.json"},{"name":"深入理解Java虚拟机","slug":"深入理解Java虚拟机","count":6,"path":"api/tags/深入理解Java虚拟机.json"}],"author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"feature":true}}