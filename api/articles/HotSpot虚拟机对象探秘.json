{"title":"HotSpot虚拟机对象探秘","uid":"c26847ef99f42b8a854d63bbf2df96ed","slug":"HotSpot虚拟机对象探秘","date":"2021-08-12T02:55:37.000Z","updated":"2021-08-13T03:30:24.139Z","comments":true,"path":"api/articles/HotSpot虚拟机对象探秘.json","cover":"https://img-blog.csdnimg.cn/d5af07a1654547758e69d8f48efeea51.jpg","content":"<h1 id=\"HotSpot虚拟机对象探秘\"><a href=\"#HotSpot虚拟机对象探秘\" class=\"headerlink\" title=\"HotSpot虚拟机对象探秘\"></a>HotSpot虚拟机对象探秘</h1><h2 id=\"1-对象的创建\"><a href=\"#1-对象的创建\" class=\"headerlink\" title=\"1. 对象的创建\"></a>1. 对象的创建</h2><h3 id=\"1-1-类加载检查\"><a href=\"#1-1-类加载检查\" class=\"headerlink\" title=\"1.1 类加载检查\"></a>1.1 类加载检查</h3><p>虚拟机遇到new之后，首先会去常量池中找这个类的<strong>符号引用</strong>，并检查这个符号引用代表的类是否已经被加载、解析和初始化过，如果找到了，就可以根据已有的信息划分空间、分配内存、初始化等等；<strong>如果没找到，那必须先执行相应的类加载过程</strong>，类加载过程以后的笔记在详细说明。</p>\n<h3 id=\"1-2-内存分配\"><a href=\"#1-2-内存分配\" class=\"headerlink\" title=\"1.2 内存分配\"></a>1.2 内存分配</h3><p>类加载检查通过之后，虚拟机将为新生对象分配内存，所需内存大小在类加载完成后就已经完全确定了，<strong>虚拟机要做的只是把一块确定大小的内存从Java堆中划分出来</strong>，怎么划分又要分两种情况看了。</p>\n<ol>\n<li><strong>假设Java堆中内存时绝对规整的</strong>，所有用过的内存都放在一边，空闲的内存放在另一边，那中间再放一个指针作为分界点指示器，那分配内存只要移动指针就完事了，这种分配方式被称为<strong>指针碰撞</strong>。</li>\n<li><strong>假设内存并不是规整的</strong>，使用的内存和空闲的内存相互交错，这时候<strong>虚拟机得维护一个列表</strong>，记录那些内存块是空闲的，分配时就从列表里找到一个够大的空间分配给实例，并更新列表，这种分配方式被称为<strong>空闲列表</strong>。</li>\n</ol>\n<p>选择哪种方式由<strong>Java堆是否规整来决定</strong>，而Java堆是否规整又由<strong>所采用的垃圾收集器是否带有压缩整理功能决定</strong>。</p>\n<p>除了如何划分可用空间外，还有另外需要考虑的问题<strong>线程安全</strong>问题，可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。解决这个问题有两种方案，<strong>一种是对分配内存空间的动作进行同步处理，另一种是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲</strong>（Thread Local Allocation Buffer,TLAB）</p>\n<h3 id=\"1-3-初始化\"><a href=\"#1-3-初始化\" class=\"headerlink\" title=\"1.3 初始化\"></a>1.3 初始化</h3><p>内存分配完成后，<strong>虚拟机需要将分配到的内存空间都初始化为零值</strong>，<strong>如果使用了TLAB，这一工作过程也可以提前至TLAB分配时进行</strong>，这一步保证了对象实例字段在Java代码中不初始化就可以直接使用，这也是Java默认初始值的原理。</p>\n<h3 id=\"1-4-进行必要的设置\"><a href=\"#1-4-进行必要的设置\" class=\"headerlink\" title=\"1.4 进行必要的设置\"></a>1.4 进行必要的设置</h3><p>虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象的对象头（Object Header）之中。根据虚拟机当前的运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>\n<h3 id=\"1-5-方法的执行\"><a href=\"#1-5-方法的执行\" class=\"headerlink\" title=\"1.5 方法的执行\"></a>1.5 <init>方法的执行</h3><p>虚拟机的眼中，新对象已经诞生，但是从Java程序的角度，还差最后一步，执行new指令之后会接着执行＜init＞方法，把对象按照程序员的意愿进行初始化，这样一个真正程序可用的对象才算完全产生出来。</p>\n<h2 id=\"2-对象的内存布局\"><a href=\"#2-对象的内存布局\" class=\"headerlink\" title=\"2. 对象的内存布局\"></a>2. 对象的内存布局</h2>","feature":false,"text":"HotSpot虚拟机对象探秘1. 对象的创建1.1 类加载检查虚拟机遇到new之后，首先会去常量池中找这个类的符号引用，并检查这个符号引用代表的类是否已经被加载、解析和初始化过，如果找到了，就可以根据已有的信息划分空间、分配内存、初始化等等；如果没找到，那必须先执行相应的类加载过...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":4,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"},{"name":"JVM","slug":"JVM","count":3,"path":"api/tags/JVM.json"},{"name":"深入理解Java虚拟机","slug":"深入理解Java虚拟机","count":3,"path":"api/tags/深入理解Java虚拟机.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AF%B9%E8%B1%A1%E6%8E%A2%E7%A7%98\"><span class=\"toc-text\">HotSpot虚拟机对象探秘</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">1. 对象的创建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">1.1 类加载检查</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\"><span class=\"toc-text\">1.2 内存分配</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">1.3 初始化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E8%BF%9B%E8%A1%8C%E5%BF%85%E8%A6%81%E7%9A%84%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">1.4 进行必要的设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-%E6%96%B9%E6%B3%95%E7%9A%84%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">1.5 方法的执行</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">2. 对象的内存布局</span></a></li></ol></li></ol>","author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Springboot的自动装配原理浅析","uid":"809380e59300e634907b381d0433de40","slug":"Springboot的自动装配原理浅析","date":"2021-08-04T08:16:55.000Z","updated":"2021-08-13T03:31:04.451Z","comments":true,"path":"api/articles/Springboot的自动装配原理浅析.json","cover":"https://img-blog.csdnimg.cn/63e12237debd402bba140afc62e94660.jpg","text":"最近在学习Springboot，不少文章和视频在完成了第一个快速入门的项目之后就直接进入了Springboot运行的原理部分，因此决定写一篇文章加深理解。 原理的理解主要使用了查看源码和画流程图的方式。 pom.xml对于一个maven项目，我们一般首要分析其pom文件，查看相关...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"技术感悟","slug":"技术感悟","count":1,"path":"api/categories/技术感悟.json"}],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":3,"path":"api/tags/源码分析.json"},{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"}],"author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"剑指 Offer 03. 数组中重复的数字的4种解法（Java语言）","uid":"ca5547898d7e053911493b82ed0cb0fa","slug":"剑指 Offer 03. 数组中重复的数字的4种解法（Java语言）","date":"2021-08-04T08:20:41.000Z","updated":"2021-08-13T03:31:20.328Z","comments":true,"path":"api/articles/剑指 Offer 03. 数组中重复的数字的4种解法（Java语言）.json","cover":"https://img-blog.csdnimg.cn/ee9bd76864244e9484ab4ed291062b32.jpg","text":"题目详情找出数组中重复的数字。 在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。 示例 1： 输入：[2, 3, 1, 0, 2, 5, 3]...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":4,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","count":1,"path":"api/tags/数据结构与算法.json"},{"name":"剑指Offer","slug":"剑指Offer","count":1,"path":"api/tags/剑指Offer.json"}],"author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}}}}