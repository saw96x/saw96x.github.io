{"title":"剑指 Offer 03. 数组中重复的数字的4种解法（Java语言）","uid":"ca5547898d7e053911493b82ed0cb0fa","slug":"剑指 Offer 03. 数组中重复的数字的4种解法（Java语言）","date":"2021-08-04T08:20:41.000Z","updated":"2021-08-13T03:31:20.328Z","comments":true,"path":"api/articles/剑指 Offer 03. 数组中重复的数字的4种解法（Java语言）.json","cover":"https://img-blog.csdnimg.cn/ee9bd76864244e9484ab4ed291062b32.jpg","content":"<h2 id=\"题目详情\"><a href=\"#题目详情\" class=\"headerlink\" title=\"题目详情\"></a>题目详情</h2><p>找出数组中重复的数字。</p>\n<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>\n<p>示例 1：</p>\n<p>输入：<br>[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 </p>\n<h2 id=\"解法一：暴力法，双层循环\"><a href=\"#解法一：暴力法，双层循环\" class=\"headerlink\" title=\"解法一：暴力法，双层循环\"></a>解法一：暴力法，双层循环</h2><p>直接进行两层循环，对每个数字都逐一比较，空间复杂度O(1)，时间复杂度O(n^2)，总的来说是下下策，执行用时吓死人<br><img src=\"https://img-blog.csdnimg.cn/3075c099b4af457dbd8c8ffe43a3945f.PNG#pic_center\" alt=\"在这里插入图片描述\"><br>Java代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public int findRepeatNumber_1(int[] nums) &#123;\n    for (int i &#x3D; 0; i &lt; nums.length; i++)\n      for (int j &#x3D; i + 1; j &lt; nums.length; j++)\n        if (nums[i] &#x3D;&#x3D; nums[j])\n          return nums[i];\n    return -1;\n  &#125;</code></pre>\n<h2 id=\"解法二-排序后相邻的两两比较\"><a href=\"#解法二-排序后相邻的两两比较\" class=\"headerlink\" title=\"解法二 排序后相邻的两两比较\"></a>解法二 排序后相邻的两两比较</h2><p>很容易想到的方法，排序后两两比较，空间复杂度O(1)，时间复杂度O(nlogn)，只能说是中下策，但执行用时已经有了相当的改善<br><img src=\"https://img-blog.csdnimg.cn/9f01f52a148f4f3399936eedf4904588.PNG#pic_center\" alt=\"在这里插入图片描述\"><br>Java代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public int findRepeatNumber_2(int[] nums) &#123;\n    Arrays.sort(nums);\n    for (int i &#x3D; 0; i &lt; nums.length - 1; i++) &#123;\n      if (nums[i] &#x3D;&#x3D; nums[i + 1])\n        return nums[i];\n    &#125;\n    return -1;\n  &#125;</code></pre>\n<h2 id=\"解法三-利用数组实现一个map映射\"><a href=\"#解法三-利用数组实现一个map映射\" class=\"headerlink\" title=\"解法三 利用数组实现一个map映射\"></a>解法三 利用数组实现一个map映射</h2><p>首先，判断重复，常见的办法就是利用HashMap或是HashSet来判断，但我们观察数组发现，给定的值都是0~n-1，那么我们没必要使用集合类来加重负担，直接用数组就可以完成映射，给定的数组元素为键，出现次数为值。<br>空间复杂度为O(n)，时间复杂度为O(n)，在大多数面试中已经算是可以让人接受的答案了。<br><img src=\"https://img-blog.csdnimg.cn/44d453122fbd47539088318a84a3b140.PNG#pic_center\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public int findRepeatNumber_3(int[] nums) &#123;\n    int[] map &#x3D; new int[nums.length];\n    for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;\n      if (map[nums[i]] &#x3D;&#x3D; 0)\n        map[nums[i]]++;\n      else\n        return nums[i];\n    &#125;\n    return -1;\n  &#125;</code></pre>\n<h2 id=\"解法四-利用重排后的元素碰撞\"><a href=\"#解法四-利用重排后的元素碰撞\" class=\"headerlink\" title=\"解法四 利用重排后的元素碰撞\"></a>解法四 利用重排后的元素碰撞</h2><p>解法三已经达到了空间时间复杂度都是O(n)的情况，实际上还能继续优化，达到O(1)的空间复杂度。<br>我们知道，数组中的元素是0~n-1，那么可以想到，如果没有重复的元素，那么排序后，每个元素都应该和它的下标相同，那么如果有重复的元素，那么两个元素就会撞到一起。<br>基于这种思路，我们设计如下算法：对每个元素都进行处理，把它交换到它应该在的位置，如果交换前发现那个位置上的元素和它相等，也就是撞车了，那么很明显这个元素就是重复的数字。<br>每个数字只要进行交换就能找到自己的位置，时间复杂度是O(n)，且没有用到额外的空间，因此空间复杂度只有O(1)</p>\n<p><img src=\"https://img-blog.csdnimg.cn/5be8fe2d4adf4ba1afedb4e5c97c069e.PNG#pic_center\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public int findRepeatNumber_4(int[] nums) &#123;\n    for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;\n      while (nums[i] !&#x3D; i) &#123;\n        &#x2F;&#x2F;两个数撞了\n        if (nums[i] &#x3D;&#x3D; nums[nums[i]]) &#123;\n          return nums[i];\n        &#125;\n        &#x2F;&#x2F;把一个数交换到它应该在的位置\n        int temp &#x3D; nums[nums[i]];\n        nums[nums[i]] &#x3D; nums[i];\n        nums[i] &#x3D; temp;\n      &#125;\n    &#125;\n    return -1;\n  &#125;</code></pre>\n","text":"题目详情找出数组中重复的数字。 在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。 示例 1： 输入：[2, 3, 1, 0, 2, 5, 3]...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":4,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"数据结构与算法","slug":"数据结构与算法","count":1,"path":"api/tags/数据结构与算法.json"},{"name":"剑指Offer","slug":"剑指Offer","count":1,"path":"api/tags/剑指Offer.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85\"><span class=\"toc-text\">题目详情</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%B8%80%EF%BC%9A%E6%9A%B4%E5%8A%9B%E6%B3%95%EF%BC%8C%E5%8F%8C%E5%B1%82%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">解法一：暴力法，双层循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%BA%8C-%E6%8E%92%E5%BA%8F%E5%90%8E%E7%9B%B8%E9%82%BB%E7%9A%84%E4%B8%A4%E4%B8%A4%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">解法二 排序后相邻的两两比较</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E4%B8%89-%E5%88%A9%E7%94%A8%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAmap%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">解法三 利用数组实现一个map映射</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%B3%95%E5%9B%9B-%E5%88%A9%E7%94%A8%E9%87%8D%E6%8E%92%E5%90%8E%E7%9A%84%E5%85%83%E7%B4%A0%E7%A2%B0%E6%92%9E\"><span class=\"toc-text\">解法四 利用重排后的元素碰撞</span></a></li></ol>","author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"带图形界面的贪吃蛇","uid":"199a087d49b9cdfd27d9b5eda9606895","slug":"带图形界面的贪吃蛇","date":"2021-08-13T03:40:46.000Z","updated":"2021-08-13T03:46:43.432Z","comments":true,"path":"api/articles/带图形界面的贪吃蛇.json","cover":"https://img-blog.csdnimg.cn/3f7704d76adf4372a345bc06fe28692d.jpg","text":"比较早的代码了，属于典型的为了面向对象而面向对象的代码。。。运行环境VS2019，图形由easyx库实现：https://easyx.cn/。 已经在注释中写出了出现的eaysx库函数的基本作用，注释前带“*”的是easyx的库函数，详情请查阅文档https://docs.eas...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"技术分享","slug":"技术分享","count":2,"path":"api/categories/技术分享.json"}],"tags":[{"name":"小游戏","slug":"小游戏","count":1,"path":"api/tags/小游戏.json"},{"name":"C++","slug":"C","count":1,"path":"api/tags/C.json"}],"author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"Springboot的自动装配原理浅析","uid":"809380e59300e634907b381d0433de40","slug":"Springboot的自动装配原理浅析","date":"2021-08-04T08:16:55.000Z","updated":"2021-08-13T03:42:25.037Z","comments":true,"path":"api/articles/Springboot的自动装配原理浅析.json","cover":"https://img-blog.csdnimg.cn/63e12237debd402bba140afc62e94660.jpg","text":"最近在学习Springboot，不少文章和视频在完成了第一个快速入门的项目之后就直接进入了Springboot运行的原理部分，因此决定写一篇文章加深理解。 原理的理解主要使用了查看源码和画流程图的方式。 pom.xml对于一个maven项目，我们一般首要分析其pom文件，查看相关...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"技术分享","slug":"技术分享","count":2,"path":"api/categories/技术分享.json"}],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"},{"name":"源码分析","slug":"源码分析","count":3,"path":"api/tags/源码分析.json"},{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"}],"author":{"name":"南望","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/db609a2e507d4a36b32e06b4676aad38.PNG","link":"/","description":"路漫漫其修远兮，吾将上下而求索······","socials":{"github":"https://github.com/saw96x","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/saw96x","csdn":"https://blog.csdn.net/saw96x?spm=1001.2101.3001.5343","juejin":"","customs":{}}},"feature":true}}